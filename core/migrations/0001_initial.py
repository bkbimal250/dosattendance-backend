# Generated by Django 5.2.4 on 2025-09-19 07:43

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Departments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('device_type', models.CharField(choices=[('essl', 'ESSL'), ('zkteco', 'ZKTeco'), ('other', 'Other')], max_length=10)),
                ('ip_address', models.GenericIPAddressField()),
                ('port', models.IntegerField(default=4370)),
                ('serial_number', models.CharField(blank=True, max_length=100)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('device_id', models.CharField(blank=True, help_text='Device ID from ESSL device', max_length=50)),
                ('firmware_version', models.CharField(blank=True, max_length=50)),
                ('device_status', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('error', 'Error')], default='online', max_length=20)),
                ('sync_interval', models.IntegerField(default=5, help_text='Sync interval in minutes')),
                ('last_attendance_sync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'System Settings',
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('employee', 'Employee'), ('accountant', 'Accountant')], default='employee', max_length=10)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('address', models.TextField(blank=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('aadhaar_card', models.CharField(blank=True, help_text='12-digit Aadhaar card number', max_length=12)),
                ('pan_card', models.CharField(blank=True, help_text='10-character PAN card number', max_length=10)),
                ('employee_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('biometric_id', models.CharField(blank=True, help_text='Biometric ID from ESSL device', max_length=50, null=True, unique=True)),
                ('joining_date', models.DateField(blank=True, null=True)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=15)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50)),
                ('account_holder_name', models.CharField(blank=True, help_text='Name as it appears on bank account', max_length=200)),
                ('bank_name', models.CharField(blank=True, max_length=200)),
                ('account_number', models.CharField(blank=True, max_length=50)),
                ('ifsc_code', models.CharField(blank=True, help_text='IFSC Code of the bank branch', max_length=20)),
                ('bank_branch_name', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('department', models.ForeignKey(blank=True, db_column='department_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='core.department')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('total_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent')], default='present', max_length=10)),
                ('day_status', models.CharField(choices=[('complete_day', 'Complete Day'), ('half_day', 'Half Day'), ('absent', 'Absent')], default='complete_day', max_length=15)),
                ('is_late', models.BooleanField(default=False, help_text='Whether employee came late')),
                ('late_minutes', models.IntegerField(default=0, help_text='Minutes late from start time')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.device')),
            ],
            options={
                'ordering': ['-date', '-check_in_time'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.CreateModel(
            name='AttendanceLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=50)),
                ('old_values', models.JSONField(blank=True, null=True)),
                ('new_values', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attendance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.attendance')),
                ('changed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='designations', to='core.department')),
            ],
            options={
                'verbose_name_plural': 'Designations',
                'ordering': ['department__name', 'name'],
                'unique_together': {('name', 'department')},
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='designation',
            field=models.ForeignKey(blank=True, db_column='designation_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='core.designation'),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('document_type', models.CharField(choices=[('salary_slip', 'Salary Slip'), ('offer_letter', 'Offer Letter'), ('id_proof', 'ID Proof'), ('address_proof', 'Address Proof'), ('aadhar_card', 'Aadhar Card'), ('pan_card', 'PAN Card'), ('voter_id', 'Voter ID'), ('driving_license', 'Driving License'), ('passport', 'Passport'), ('birth_certificate', 'Birth Certificate'), ('educational_certificate', 'Educational Certificate'), ('experience_certificate', 'Experience Certificate'), ('medical_certificate', 'Medical Certificate'), ('bank_statement', 'Bank Statement'), ('other', 'Other')], max_length=30)),
                ('file', models.FileField(upload_to='documents/')),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('document_type', models.CharField(choices=[('offer_letter', 'Offer Letter'), ('salary_increment', 'Salary Increment Letter'), ('salary_slip', 'Salary Slip')], max_length=50)),
                ('template_content', models.TextField(help_text='HTML template with Django template variables')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Document Templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GeneratedDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('offer_letter', 'Offer Letter'), ('salary_increment', 'Salary Increment Letter'), ('salary_slip', 'Salary Slip')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField(help_text='Generated HTML content')),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='generated_documents/')),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('is_sent', models.BooleanField(default=False)),
                ('offer_data', models.JSONField(blank=True, help_text='Data specific to offer letters', null=True)),
                ('increment_data', models.JSONField(blank=True, help_text='Data specific to salary increment letters', null=True)),
                ('salary_data', models.JSONField(blank=True, help_text='Data specific to salary slips', null=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_documents', to=settings.AUTH_USER_MODEL)),
                ('generated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_documents_by', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.documenttemplate')),
            ],
            options={
                'verbose_name_plural': 'Generated Documents',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='Leave',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('leave_type', models.CharField(choices=[('casual', 'Casual Leave'), ('sick', 'Sick Leave'), ('annual', 'Annual Leave'), ('maternity', 'Maternity Leave'), ('paternity', 'Paternity Leave'), ('other', 'Other')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_days', models.IntegerField()),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=10)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_leaves', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('attendance', 'Attendance'), ('leave', 'Leave'), ('system', 'System'), ('document', 'Document')], max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('managers', models.ManyToManyField(blank=True, help_text='Up to 5 managers can be assigned to an office', limit_choices_to={'role': 'manager'}, related_name='managed_offices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Offices',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='device',
            name='office',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.office'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='office',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.office'),
        ),
        migrations.CreateModel(
            name='Resignation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('resignation_date', models.DateField(help_text='Resignation submission date')),
                ('notice_period_days', models.IntegerField(default=30, help_text='Notice period in days (15 or 30)')),
                ('reason', models.TextField(help_text='Reason for resignation')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=10)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if applicable')),
                ('handover_notes', models.TextField(blank=True, help_text='Handover notes and pending work')),
                ('last_working_date', models.DateField(blank=True, help_text='Automatically calculated last working date (resignation_date + notice_period)', null=True)),
                ('is_handover_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['admin', 'manager']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_resignations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resignations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Resignation',
                'verbose_name_plural': 'Resignations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_user_id', models.CharField(help_text='User ID from the device', max_length=50)),
                ('device_user_name', models.CharField(help_text='Name from the device', max_length=100)),
                ('device_user_privilege', models.CharField(choices=[('user', 'User'), ('admin', 'Admin'), ('super_admin', 'Super Admin')], default='user', max_length=20)),
                ('device_user_password', models.CharField(blank=True, help_text='Password from device (if available)', max_length=50)),
                ('device_user_group', models.CharField(blank=True, help_text='Group from device', max_length=50)),
                ('device_user_card', models.CharField(blank=True, help_text='Card number from device', max_length=50)),
                ('is_mapped', models.BooleanField(default=False, help_text='Whether this device user is mapped to a system user')),
                ('mapping_notes', models.TextField(blank=True, help_text='Notes about the mapping')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_users', to='core.device')),
                ('system_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='device_mappings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['device', 'device_user_id'],
                'unique_together': {('device', 'device_user_id')},
            },
        ),
        migrations.CreateModel(
            name='ESSLAttendanceLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('biometric_id', models.CharField(max_length=50)),
                ('punch_time', models.DateTimeField()),
                ('punch_type', models.CharField(choices=[('in', 'Check In'), ('out', 'Check Out')], max_length=10)),
                ('is_processed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.device')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-punch_time'],
                'indexes': [models.Index(fields=['biometric_id', 'punch_time'], name='core_esslat_biometr_f0fe25_idx'), models.Index(fields=['device', 'punch_time'], name='core_esslat_device__b84992_idx')],
            },
        ),
        migrations.CreateModel(
            name='WorkingHoursSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('standard_hours', models.DecimalField(decimal_places=2, default=9.0, help_text='Standard working hours per day', max_digits=4)),
                ('start_time', models.TimeField(default='10:00:00', help_text='Standard start time')),
                ('end_time', models.TimeField(default='19:00:00', help_text='Standard end time')),
                ('late_threshold', models.IntegerField(default=15, help_text='Minutes after start time to consider late')),
                ('half_day_threshold', models.IntegerField(default=300, help_text='Minutes to consider half day (5 hours)')),
                ('late_coming_threshold', models.TimeField(default='11:30:00', help_text='Time after which check-in is considered late coming')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('office', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.office')),
            ],
            options={
                'verbose_name_plural': 'Working Hours Settings',
                'unique_together': {('office',)},
            },
        ),
    ]
